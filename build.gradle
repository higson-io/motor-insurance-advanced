buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        codegenGradleVersion = '0.1.35'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
        classpath group: 'pl.decerto.hyperon.persistence', name: 'codegen-gradle-plugin', version: codegenGradleVersion
    }
}

plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'codegen-gradle-plugin'

group = 'pl.decerto'
version = '1.0.0'
sourceCompatibility = 11

def hyperonVersion = '1.6.36'

repositories {
    mavenCentral()
    mavenLocal()
}

// read more here: https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
node {

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = false

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/src/main/webapp")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/src/main/webapp/node_modules")
}

sourceSets {
    hyperonGenerated {
        compileClasspath = configurations.hyperonGeneratedCompile
        java {
            srcDir file("generated-sources")
        }
    }
    main {
        compileClasspath += hyperonGenerated.output
        runtimeClasspath += hyperonGenerated.output
    }
    test {
        compileClasspath += hyperonGenerated.output
        runtimeClasspath += hyperonGenerated.output
    }

}

bundle2java {
    bundleDefPath = "$projectDir/src/main/resources/bundle.def"
    generationPath = "$projectDir/generated-sources".toString()
    entitiesPackage = 'pl.decerto.app.model'
    servicePackage = 'pl.decerto.app.service'
    setterChaining = true
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jdbc:2.0.3.RELEASE')
    implementation('commons-dbcp:commons-dbcp:1.4')

    compile sourceSets.hyperonGenerated.output
    api group: 'pl.decerto', name: 'hyperon-runtime', version: hyperonVersion
    api group: 'pl.decerto', name: 'hyperon-persistence', version: hyperonVersion

    hyperonGeneratedCompile group: 'pl.decerto', name: 'hyperon-persistence', version: hyperonVersion
    hyperonGeneratedCompile group: 'org.springframework.boot', name: 'spring-boot-starter'

    runtimeOnly('com.h2database:h2:1.4.196')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

compileHyperonGeneratedJava.dependsOn tasks.getByName('bundle2java')
classes.dependsOn hyperonGeneratedClasses
compileJava.dependsOn compileHyperonGeneratedJava

